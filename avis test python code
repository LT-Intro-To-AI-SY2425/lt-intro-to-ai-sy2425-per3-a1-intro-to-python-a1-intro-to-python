"""Assignment 1

Fill in the following function skeletons - descriptions are provided in 
the docstring (the triple quote thing at the top of each function)

Some assert statements have been provided - write more of them to test your code!

The `raise NotImplementedError(...)`s are placeholders to help you not skip implementing
a function. They should be removed and replaced with your solution.

This portion of the assignment will not be graded, but this gives you some problems to 
check, if you do not complete the generative AI portion of the assignment.
"""

from typing import List, TypeVar


def absolute(n: int) -> int:
    # """Gives the absolute value of the passed in number. Cannot use the built in
    # function `abs`.

    #    Args:
    #       n - the number to take the absolute value of
    #  Returns:
    #     the absolute value of the passed in number
    #    """
    # def absolute_value(n):
    if n < 0:
        return -n
    else:
        return n
    raise NotImplementedError("absolute")


def factorial(n: int) -> int:
    # """Takes a number n, and computes the factorial n! You can assume the passed in
    # number will be positive

    # Args:
    #     n - the number to compute factorial of

    # Returns:
    #     factorial of the passed in number
    # """
    if n == 0:
        return 1  # The factorial of 0 is 1 by definition.
    
    result = 1
    for i in range(1, n + 1):
        result *= i
    
    return result    
    raise NotImplementedError("factorial")


T = TypeVar("T")

# this line causes the nested code to be skipped if the file is imported instead of run
if __name__ == "__main__":
    assert absolute(-1) == 1, "absolute of -1 failed"
    assert factorial(4) == 24, "factorial of 4 failed"
    print(absolute(-1))
    print(factorial(5))
    print("All tests passed!")
